package com.sh.datasharing.fisco.bcos.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class MetadataDepository_test01 extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b50610add806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308542bb71461005c5780636e8f9ffb146101f857806385a04f0f14610223575b600080fd5b34801561006857600080fd5b506101db600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506104b3565b604051808381526020018281526020019250505060405180910390f35b34801561020457600080fd5b5061020d6105b4565b6040518082815260200191505060405180910390f35b34801561022f57600080fd5b5061024e600480360381019080803590602001909291905050506105bd565b60405180806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018060200180602001806020018060200186810386528d818151815260200191508051906020019080838360005b838110156102d65780820151818401526020810190506102bb565b50505050905090810190601f1680156103035780820380516001836020036101000a031916815260200191505b5086810385528a818151815260200191508051906020019080838360005b8381101561033c578082015181840152602081019050610321565b50505050905090810190601f1680156103695780820380516001836020036101000a031916815260200191505b50868103845289818151815260200191508051906020019080838360005b838110156103a2578082015181840152602081019050610387565b50505050905090810190601f1680156103cf5780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b838110156104085780820151818401526020810190506103ed565b50505050905090810190601f1680156104355780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b8381101561046e578082015181840152602081019050610453565b50505050905090810190601f16801561049b5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b600080600080925060008081546001019190508190559150600160008381526020019081526020016000209050878160000190805190602001906104f89291906109b8565b50328160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504281600201819055508681600301908051906020019061055d9291906109b8565b50858160040190805190602001906105769291906109b8565b508481600501908051906020019061058f9291906109b8565b50838160060190805190602001906105a89291906109b8565b50509550959350505050565b60008054905090565b60606000806060806060806105d0610a38565b600160008a815260200190815260200160002060e06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106885780601f1061065d57610100808354040283529160200191610688565b820191906000526020600020905b81548152906001019060200180831161066b57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561082c5780601f106108015761010080835404028352916020019161082c565b820191906000526020600020905b81548152906001019060200180831161080f57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b505050505081525050905080600001519750806020015196508060400151955080606001519450806080015193508060a0015192508060c00151915050919395979092949650565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109f957805160ff1916838001178555610a27565b82800160010185558215610a27579182015b82811115610a26578251825591602001919060010190610a0b565b5b509050610a349190610a8c565b5090565b60e06040519081016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016060815260200160608152602001606081525090565b610aae91905b80821115610aaa576000816000905550600101610a92565b5090565b905600a165627a7a723058207b71ba4f5c5ec8758ac0d9eee21059f36561b8cd0b9375282e30d2c1813124e90029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b50610add806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630d31fb171461005c57806349d96b13146101f8578063ca63407114610223575b600080fd5b34801561006857600080fd5b506101db600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506104b3565b604051808381526020018281526020019250505060405180910390f35b34801561020457600080fd5b5061020d6105b4565b6040518082815260200191505060405180910390f35b34801561022f57600080fd5b5061024e600480360381019080803590602001909291905050506105bd565b60405180806020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018060200180602001806020018060200186810386528d818151815260200191508051906020019080838360005b838110156102d65780820151818401526020810190506102bb565b50505050905090810190601f1680156103035780820380516001836020036101000a031916815260200191505b5086810385528a818151815260200191508051906020019080838360005b8381101561033c578082015181840152602081019050610321565b50505050905090810190601f1680156103695780820380516001836020036101000a031916815260200191505b50868103845289818151815260200191508051906020019080838360005b838110156103a2578082015181840152602081019050610387565b50505050905090810190601f1680156103cf5780820380516001836020036101000a031916815260200191505b50868103835288818151815260200191508051906020019080838360005b838110156104085780820151818401526020810190506103ed565b50505050905090810190601f1680156104355780820380516001836020036101000a031916815260200191505b50868103825287818151815260200191508051906020019080838360005b8381101561046e578082015181840152602081019050610453565b50505050905090810190601f16801561049b5780820380516001836020036101000a031916815260200191505b509c5050505050505050505050505060405180910390f35b600080600080925060008081546001019190508190559150600160008381526020019081526020016000209050878160000190805190602001906104f89291906109b8565b50328160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504281600201819055508681600301908051906020019061055d9291906109b8565b50858160040190805190602001906105769291906109b8565b508481600501908051906020019061058f9291906109b8565b50838160060190805190602001906105a89291906109b8565b50509550959350505050565b60008054905090565b60606000806060806060806105d0610a38565b600160008a815260200190815260200160002060e06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106885780601f1061065d57610100808354040283529160200191610688565b820191906000526020600020905b81548152906001019060200180831161066b57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561082c5780601f106108015761010080835404028352916020019161082c565b820191906000526020600020905b81548152906001019060200180831161080f57829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b50505050508152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109705780601f1061094557610100808354040283529160200191610970565b820191906000526020600020905b81548152906001019060200180831161095357829003601f168201915b505050505081525050905080600001519750806020015196508060400151955080606001519450806080015193508060a0015192508060c00151915050919395979092949650565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109f957805160ff1916838001178555610a27565b82800160010185558215610a27579182015b82811115610a26578251825591602001919060010190610a0b565b5b509050610a349190610a8c565b5090565b60e06040519081016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001606081526020016060815260200160608152602001606081525090565b610aae91905b80821115610aaa576000816000905550600101610a92565b5090565b905600a165627a7a7230582022f41dffbab065caa8c0240c59297dc84fbc421c2d10cad8b5f397714c6506660029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_fileName\",\"type\":\"string\"},{\"name\":\"_fileType\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_metadataHash\",\"type\":\"string\"}],\"name\":\"uploadMetadata\",\"outputs\":[{\"name\":\"retCode\",\"type\":\"uint256\"},{\"name\":\"fileID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFileNums\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"fileID\",\"type\":\"uint256\"}],\"name\":\"selectMetadata\",\"outputs\":[{\"name\":\"_fileName\",\"type\":\"string\"},{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_uploadTime\",\"type\":\"uint256\"},{\"name\":\"_fileType\",\"type\":\"string\"},{\"name\":\"_fileSize\",\"type\":\"string\"},{\"name\":\"_description\",\"type\":\"string\"},{\"name\":\"_metadataHash\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_UPLOADMETADATA = "uploadMetadata";

    public static final String FUNC_GETFILENUMS = "getFileNums";

    public static final String FUNC_SELECTMETADATA = "selectMetadata";

    protected MetadataDepository_test01(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt uploadMetadata(String _fileName, String _fileType, String _fileSize, String _description, String _metadataHash) {
        final Function function = new Function(
                FUNC_UPLOADMETADATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileSize), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_metadataHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] uploadMetadata(String _fileName, String _fileType, String _fileSize, String _description, String _metadataHash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADMETADATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileSize), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_metadataHash)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUploadMetadata(String _fileName, String _fileType, String _fileSize, String _description, String _metadataHash) {
        final Function function = new Function(
                FUNC_UPLOADMETADATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileName), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_fileSize), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_description), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_metadataHash)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, String, String, String> getUploadMetadataInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADMETADATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getUploadMetadataOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPLOADMETADATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getFileNums() throws ContractException {
        final Function function = new Function(FUNC_GETFILENUMS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple7<String, String, BigInteger, String, String, String, String> selectMetadata(BigInteger fileID) throws ContractException {
        final Function function = new Function(FUNC_SELECTMETADATA, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fileID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<String, String, BigInteger, String, String, String, String>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue());
    }

    public static MetadataDepository_test01 load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new MetadataDepository_test01(contractAddress, client, credential);
    }

    public static MetadataDepository_test01 deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(MetadataDepository_test01.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }
}
